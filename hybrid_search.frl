/* Alex Kersey
 * Daniel Moon 
 * Garrett Scholtes
 * 
 * 2016-09-25
 * 
 * AI Assignment #2
 *
 *
 * 
 * Scroll down to bottom of page for the analysis 
 * 
 * 
 */

/* The  stopping rule for this condition is obtained when 
the current path to be expanded starts with the goal node, that is:
*/

((hybridDB T ((X |TAIL) |  PATHS) (X|TAIL))
               (goal X))



/* We will use pattern matching to fulfill each of the 4 cases for 
hybrid sort, revolving around the value of the integer T: */


% If T < 0, proceed as Depth First search 

((hybridDB T (PAth | TPaths) SOL)
           (less T 0)
           (expand PAth  NPaths)
           (append NPaths TPaths NEWPATHS)
           (hybridDB T NEWPATHS SOL))

 
% If T > 5, proceed as Breadth First search

((hybridDB T (PAth | TPaths) SOL)
           (less 5 T)
           (expand PAth  NPaths)
           (append TPaths NPaths NEWPATHS)
           (hybridDB T NEWPATHS SOL))


% If 1 <= T <= 5 AND the out-degree of the current node
% is less than T, proceed as Depth First search

((hybridDB T ((HNode | PAth) | TPaths) SOL)
           (outdeg_aux HNode OUTDEG)
           (less OUTDEG T)
           (expand (HNode | PAth)  NPaths)
           (append NPaths TPaths NEWPATHS)
           (hybridDB T NEWPATHS SOL))


% If 1 <= T <= 5 AND the out-degree of the current node
% is NOT less than T, proceed as Breadth First Search

((hybridDB T (PAth | TPaths) SOL)
           (expand PAth  NPaths)
           (append TPaths NPaths NEWPATHS)
           (hybridDB T NEWPATHS SOL))


/************ Taken from gengraph.frl ************/

((length () 0))
((length (H|T) N)(length T LN)(sum LN 1 N))

((outdeg_aux X N)
  (findall (X Y) ((connect X Y)) L)(length L N))

/*************************************************/

/************ Everything below is taken **********/
/************ from depth_first.frl and  **********/
/************ breadth_first.frl ******************/

/*
Taken from breadth_first.frl and depth_first.frl, this predicate takes a 
path in the graph and finds all possible acyclic successor paths (NPaths)
*/

((expand (HPath|TPath) NPaths)
            (findall  (NEXT HPath|TPath)
                       ((path HPath NEXT)(negg member NEXT (HPath|TPath)))
                         NPaths
               )
)

%We next wrap this in a top level predicate  solve_Hybrid as follows:

((solve_Hybrid T S G SOL)
                 (kill goal)
                 (addcl ((goal G)))
                 (hybridDB T ((S)) S1)
                 (reverse S1 SOL)
                 (pretty_print_solution SOL)
                 (delcl  ((goal G))  ))
 


/*** graph example ***/
((connect a b))
((connect a c))
((connect b d))
((connect b e))
((connect b f))
((connect c g))
((connect c h))
((connect d i))
((connect d j))

((path X Y)(connect X Y))
((path X Y)(connect Y X))


/************** lecture example end here ***************/

/*

/* (plan S G) succeeds if there is a solution path through 
the graph from S to G; the solution will be printed and 
alternative solutions will be found upon request (backtracking)
*/


((plan S G)
    (kill goal)
    (addcl ((goal G)) )
    (go  (((S 0 0))) P) 
    (reverse P RP)
    (pp "solution is")(print RP)
    (delcl ((goal G)) ))


/* (go X Y) succeeds if there is a path Y with no loops from 
any head nodes of the branches in the ordered list of branches 
X to the goal node G found in the knowledge base fact (goal G)
*/


((go  ( ( (X HV L) | Y) | R) (X|Y) )
    (goal X))

((go (X|Y) Z)
    (move X NL)
    (rem_dup NL Y NL1 Y1)
    (put_in_rest NL1 Y1 NP)
    (go NP Z))

/* 
((rem_dup X Y A B) succeeds if A and B are two lists of branches wich are formed from the list of brances X and Y respectively, by removing the longer of the two branches in X and Y that go to the same node, if any
*/

((rem_dup () Y () Y))
((rem_dup Y () Y ()))
((rem_dup  (((X Y Z)|P)|ON) (((X Y1 Z1)|P1)|ON1) (((X Y Z)|P)|R) R1)
     (less Z Z1)
     (rem_dup ON ON1 R R1))

((rem_dup  (((X Y Z)|P)|ON) (((X Y1 Z1)|P1)|ON1) R (((X Y Z)|P1)|R1))
     (less Z! Z)
     (rem_dup ON ON1 R R1))

((rem_dup  (((X Y Z)|P)|ON) (((X1 Y1 Z1)|P1)|ON1) 
           (((X Y Z)|P)|R) (((X1 Y1 Z1)|P1)|R1))
     (rem_dup ON ON1 R R1))

/* (move A B) succeeds if B is a sorted list of all 
possible branches formed by expanding the branch A
*/

((move ((X HV L)|Z) NL)
    (paths X Y Z)
    (new_paths Y L (X|Z) NL))

/*(new_paths NL L PP PB) succeeds if BL is a list of 
branches obtained from NL when the previous path is PP of length L

*/

((new_paths () L PP () ))
((new_paths (NN|ON) L PP (((NN HV L1) | PP)|OP))
    (sum L 1 L1)
    (heuristic NN L1 HV)
    (new_paths ON L PP OP))

/* (paths N NL P) succeeds if NL is a list of possible nodes 
that are connected to the node N and are not in the list P
*/

((paths N NL P)(isall NL X (path N X)(negg member X P)))

/*
 note: isall is a builtin predicate; 
       for example: ?((isall LIST X (member X (a b c))) 
       returns LIST=(c b a))
*/


/*(put_in_rest X Y Z) succeeds if Z is the ordered list 
resulting from merging a list of branches X with the ordered 
list of branches Y

*/

((put_in_rest () Y Y))
((put_in_rest (X|Y) Z NL)
   (put_in_list Z X L)
   (put_in_rest Y L NL))

/*
(put_in_list X Y Z) succeeds if Y is the sorted list 
obtained from branch X being put in a list of branches Y
*/


((put_in_list () Y Y))
((put_in_list Y () (Y)))
((put_in_list ((X Y Z)|R) (((X1 Y1 Z1)|R1)|L) (((X1 Y1 Z1)|R1)|NL))
       (less Y1 Y)
       (put_in_list ((X Y Z)|R) L NL))


((put_in_list ((X Y Z)|R) 
              ( ((X1 Y1 Z1)|R1)|L) (((X Y Z)|R)((X1 Y1 Z1)|R1)|L))
      (negg less Y1 Y))



 ((heuristic _ _ 1))


*/


/* auxiliary predicates */

((member H (H|_)))
((member X (H|T))(member X T))

((print ())(p success))
((print (H | T))
     (p H "--->")
     (pp)(print T)) 

((reverse () ()))
((reverse (H|T) R)(reverse T RT)(append RT (H) R))

((append () L L))
((append (H|T) L2 (H|L))(append T L2 L))


((pretty_print_solution () ))
((pretty_print_solution (H|T))(pp)(p H "->")(pretty_print_solution T))


/********************************************************/
/********************** DISCUSSION **********************/
/********************************************************/
/*
 *
 * The motivation for creating a hybrid search is that either depth first
 * or breadth first may perform better depending on the branching factor
 * of a node being searched.
 * 
 * We attempt to create a "hybrid" search of these two search methods in
 * order to take advantage of the best cases of each search pattern.
 * 
 * ---------------------------------------------------------------------
 *
 * See the following example (image of the connect statements above)
 * 
 *       https://i.imgur.com/nkltcoz.png  <--- our example graph 
 * 
 * 
 * We chose to use a basic acyclic graph for simplicity of the analysis
 * 
 * Suppose in this example we wish to search for a path from "a" to "f"
 * 
 * In this example we can clearly see that the fastest search solution would  
 * identify the path "a -> b -> f" in 3 checks (i.e., it would check the nodes
 * in this order: [a, b, f])
 * 
 * We can also see in this example that depth first search would take 7 checks 
 * to find the solution, searching the nodes in the order [a, b, d, i, j, e, f]
 * 
 * Breadth first would look at nodes in the order [a, b, c, d, e, f], finding
 * the solution in 6 steps.
 * 
 * Let us suppose we perform a hybrid search with T = 3.  In this case, the search
 * visits nodes in the order [a, b, d, e, f], in only 5 checks -- better than 
 * breadth first and depth first alone.  By using the branching factor to determine
 * which order to search, we were able to prune nodes that would have otherwise been 
 * searched via the other methods.
 * 
 * 
 * 
 * This simple example demonstrates how HybridDB can SOMETIMES perform better
 * than both depth first and breadth first search.  However, this alone does not
 * necessarily demonstrate that HybridDB is always better.
 * 
 * In fact, we can construct a pathological example where HybridDB performs *worse* 
 * than both its breadth first and depth first counterparts
 * 
 *                 a
 *                /|\
 *               / | \
 *              /  |  \  
 *              b  c   d
 *             /\
 *            /  \
 *            e   f
 *           /\
 *          /  \
 *          g   h
 * 
 * 
 *    https://i.imgur.com/jrfAYl9.png <-- visit this link if the formatting looks bad
 * 
 * 
 * 
 * In this example, suppose we wish to find the path from "a" to "f"
 * 
 * Breadth first searches in order [a, b, c, d, e, f], performing 6 checks 
 * 
 * Depth first searches in order [a, b, e, g, h, f], also performing 6 checks
 * 
 * HybridDB, width T = 3, searches in order [a, b, c, d, e, g, h, f], which
 * visits every node in the graph and takes 8 checks, worse than both cases
 *
 * 
 * 
 * 
 * Therefore, we can conclude that HybridDB will SOMETIMES perform BETTER
 * and SOMETIMES perform WORSE than both Breadth and Depth first search
 *
 */